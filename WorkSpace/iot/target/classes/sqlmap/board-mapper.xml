<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="board.mapper">
	<!-- 해당 댓글의 삭제 처리 -->
	<delete id="comment_delete">
		delete from board_comment
		where id = #{id}	
	</delete>

	<!-- 해당 댓글의 수정 처리 -->
	<update id="comment_update">
		update board_comment set content = #{content}
		where id = #{id}	
	</update>

	<!-- 댓글 목록 조회 -->
	<select id="comment_list" resultType="board.BoardCommentVO">
		select c.*, (select name from member where id=c.writer) name
		from board_comment c
		where pid = #{pid}
		order by id desc
	</select>	

	<!-- 댓글 저장 처리 -->
	<insert id="comment_insert">
		insert into board_comment(content, pid, writer)
		values (#{content}, #{pid}, #{writer})
	</insert>

	
	<!-- 방명록 글 수정 저장 처리 -->
	<update id="update">
		update board set title=#{title}, content=#{content}
				, filename = #{filename, jdbcType=VARCHAR}
				, filepath = #{filepath, jdbcType=VARCHAR}
		where id = #{id}
	</update>
	
	<!-- 해당 글 삭제 처리 -->
	<delete id="delete">
		delete from board
		where id = #{id}
	</delete>

	<!-- 해당 글의 조회수 증가 -->
	<update id="read">
		update board set readcnt = readcnt+1
		where id = #{id}	
	</update>
	
	<!-- 해당 글의 상세 정보 조회 -->
	<select id="detail" resultType="board.BoardVO">
		select b.*, (select name from member where id = b.writer) name
		from
			( select board.*,
				lag(id, 1, 0) over (order by id desc) as prev,
				lag(title, 1, '이전 글없음') over (order by id desc) as prev_title,
				lead(id, 1, 0) over (order by id desc) as next,
				lead(title, 1, '다음 글없음') over (order by id desc) as next_title				 
			  from board
			  order by id desc) b		
		where id = #{id}
	</select>
	
	<sql id='where_search'>
		<!-- 제목에 '테스트' 문자가 있는 것을 조회한다면 where title like '테스트' -->
		<if test="search == 'title' or search == 'content'">
			where ${search} like '%'||#{keyword}||'%'		
		</if>
		<!-- 작성자에 '자' 문자가 있는 것을 조회한다면 member 테이블에서 like를 활용해
		name 에 '자'를 포함한 글자를 찾을 수 있도록 함. -->
		<if test="search == 'writer'">
			where <include refid="search_writer" />		
		</if>
	
		<if test="search == 'all' ">
			where title like '%'||#{keyword}||'%'
			or content like '%'||#{keyword}||'%'
			or <include refid="search_writer" />
		</if>
	</sql>
	
	<sql id = 'search_writer'>
		writer in (select id from member where name like '%'||#{keyword}||'%' )
	</sql>
	
	
	<!-- 방명록 신규 글 저장 -->
	<insert id="insert">
		insert into board ( title, content, writer, filename, filepath )
		values (#{title}, #{content}, #{writer},
				#{filename, jdbcType=VARCHAR}, #{filepath, jdbcType=VARCHAR})	
	</insert>
	
	<!-- 전체 게시글 수 조회 -->
	<select id="totalList" resultType="integer">
		select count(*) from board <include refid="where_search" />	
	</select>	

	<!-- 전체 게시글 조회 -->
	<select id="list" resultType="board.BoardVO">
		select * 
		from ( select rownum no, b.*, ( select name from member where id = b.writer ) name
				from ( select * from board <include refid="where_search" />
						order by id) b	
				order by no desc ) b
		where no between #{beginList} and #{endList}
	</select>	
</mapper>